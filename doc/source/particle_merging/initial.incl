----

:Parameter:  :p:`Initial` : :p:`cycle`
:Summary: :s:`Initial cycle number`
:Type:    :t:`list` ( :t:`integer` )
:Default: :d:`0`
:Scope:     :c:`Cello`

:e:`Initial value for the cycle number.`

----

:Parameter:  :p:`Initial` : :p:`time`
:Summary: :s:`Initial time`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     :c:`Cello`

:e:`Initial time in code units.`

value
-----

:Parameter:  :p:`Initial` : :p:`value` : :p:`<field>` :
:Summary: :s:`Initialize field values`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Cello

:e:`This initialization approach allows initializing field values directly.  The first element of the list must be a` :t:`float` :e:`\
expression, and may include arithmetic operators, variables "x", "y", "z", and most functions in the POSIX math library /include/math\
.h.  The second optional list element is a logical expression, and  serves as a "mask" of the domain.  The third` :t:`float` :e:`expr\
ession parameter is required if a mask is supplied, and serves as the "else" case.  Multiple such mask-value pairs may be used.  For \
example:`

::

   Initial {

      list = ["value"];

      value {
         density = [ sin ( x + y ), x - y < 0.0, 1.0 ];
      }
   }

