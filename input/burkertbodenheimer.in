#======================================================================
#
#  File        : 
#  Author      : John Regan
#  Date        : 2020-03-17
#  Brief       : File for initializing a Burkert-Bodenheimer test
#
#    Test for initializing and running the set-up of accreting particles
#    according the Burkert-Bodenheimer setup. 
#
#
#  Description : 
#
#  REQUIRES root_blocks
#
#======================================================================



Adapt {
     list = [ "slope" ];
     max_level = 2;
     min_level = 0;
     slope {
         max_coarsen = 0.000000000000000;
         min_refine = 0.001000000000000000;
         type = "particle_mass";
     };
 }

 Boundary {
     type = "periodic";
 }

 Domain {
     rank = 3;
     lower = [ -1.600000000000000e+17, -1.600000000000000e+17, -1.600000000000000e+17 ];
     upper = [ 1.600000000000000e+17, 1.600000000000000e+17, 1.600000000000000e+17 ];
 }

 Field {
     alignment = 8;
     gamma = 1.0000000001;
     ghost_depth = 4;
     history = 1;
     list = [ "density", "velocity_x", "velocity_y", "velocity_z", "acceleration_x",
     "acceleration_y", "acceleration_z", "temperature", "total_energy", "internal_energy",
     "pressure", "density_gas", "density_particle", "density_total", "density_particle_accumulate",
     "potential", "potential_temp", "potential_copy", "X", "B", "X_copy", "B_copy", "diagonal" ];
     padding = 0;
 }

 Initial {
     list = [ "burkertbodenheimer" ];
     
 }

 Mesh {
     root_blocks = [ 4, 4, 4 ];
     root_rank = 3;
     root_size = [ 32, 32, 32 ];
 }

 Method {
     check_gravity {
         particle_type = "dark";
     };
     gravity {
         solver = "hg";
     };
     list = [ "pm_deposit", "gravity", "pm_update" ];
     pm_update {
         max_dt = 10.000000000000000;
     };
 }

 Output {
     ax {
         colormap = [ 0.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 1.000000000000000 ];
         dir = [ "Dir_Collapse-BCG3D_%04d", "cycle" ];
         field_list = [ "acceleration_x" ];
         image_ghost = false;
         image_size = [ 512, 512 ];
         name = "ax.png";
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "image";
     };
     dark {
         colormap = [ 0.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 1.000000000000000 ];
         dir = [ "Dir_Collapse-BCG3D_%04d", "cycle" ];
         image_ghost = false;
         image_size = [ 512, 512 ];
         name = "dark.png";
         particle_list = [ "dark" ];
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "image";
     };
     data {
         dir = [ "Dir_Collapse-BCG3D_%04d", "cycle" ];
         field_list = [ "density", "velocity_x", "velocity_y", "acceleration_x", "acceleration_y", "temperature", "total_energy", "internal_energy", "pressure", "density_total", "potential" ];
         name = [ "data-%04d.h5", "cycle" ];
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "data";
     };
     list = [ "dark", "po", "ax", "mesh" ];
     mesh {
         colormap = [ 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 0.000000000000000 ];
         dir = [ "Dir_Collapse-BCG3D_%04d", "cycle" ];
         image_max = 6.000000000000000;
         image_size = [ 512, 512 ];
         image_type = "mesh";
         name = "mesh.png";
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "image";
     };
     pmass {
         colormap = [ 0.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 1.000000000000000 ];
         field_list = [ "particle_mass" ];
         image_ghost = false;
         image_size = [ 512, 512 ];
         name = "pmass.png";
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "image";
     };
     po {
         colormap = [ 0.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 0.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 0.000000000000000, 1.000000000000000, 1.000000000000000, 1.000000000000000 ];
         dir = [ "Dir_Collapse-BCG3D_%04d", "cycle" ];
         field_list = [ "potential_copy" ];
         image_ghost = false;
         image_size = [ 512, 512 ];
         name = "po.png";
         schedule {
             step = 5;
             var = "cycle";
         };
         type = "image";
     };
 }

 Particle {
     dark {
         attributes = [ "x", "default", "y", "default", "z", "default", "vx", "default", "vy", "default", "vz", "default", "ax", "default", "ay", "default", "az", "default" ];
         constants = [ "mass", "default", 10.00000000000000 ];
         groups = [ "has_mass" ];
         position = [ "x", "y", "z" ];
         velocity = [ "vx", "vy", "vz" ];
     };
     list = [ "dark" ];
 }

Solver {
     coarse {
         iter_max = 100;
         res_tol = 0.01000000000000000;
         solve_type = "block";
         type = "cg";
     };
     hg {
         coarse_level = 0;
         iter_max = 100;
         monitor_iter = 1;
         precondition = "mg";
         res_tol = 0.01000000000000000;
#         restart_cycle = 1000;
         type = "bicgstab";
     };
     last {
         iter_max = 5;
         monitor_iter = 0;
         type = "jacobi";
         solve_type = "leaf";
     };
     list = [ "hg", "mg", "coarse", "last", "pre", "post" ];
     mg {
         coarse_level = -2;
         coarse_solve = "coarse";
         iter_max = 1;
         res_tol = 0.01;
         last_smooth = "last";
         max_level = 4;
         min_level = -2;
         monitor_iter = 0;
         post_smooth = "post";
         pre_smooth = "pre";
         solve_type = "leaf";
         type = "mg0";
     };
     post {
         iter_max = 0;
         type = "jacobi";
         solve_type = "level";
     };
     pre {
         iter_max = 0;
         type = "jacobi";
         solve_type = "level";
     };
 }

 Stopping {
     cycle = 111;
 }
